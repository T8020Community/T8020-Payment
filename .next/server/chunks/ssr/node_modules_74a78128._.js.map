{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/codespace/t8020-purchase/node_modules/uqr/dist/index.mjs"],"sourcesContent":["var QrCodeDataType = /* @__PURE__ */ ((QrCodeDataType2) => {\n  QrCodeDataType2[QrCodeDataType2[\"Border\"] = -1] = \"Border\";\n  QrCodeDataType2[QrCodeDataType2[\"Data\"] = 0] = \"Data\";\n  QrCodeDataType2[QrCodeDataType2[\"Function\"] = 1] = \"Function\";\n  QrCodeDataType2[QrCodeDataType2[\"Position\"] = 2] = \"Position\";\n  QrCodeDataType2[QrCodeDataType2[\"Timing\"] = 3] = \"Timing\";\n  QrCodeDataType2[QrCodeDataType2[\"Alignment\"] = 4] = \"Alignment\";\n  return QrCodeDataType2;\n})(QrCodeDataType || {});\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst LOW = [0, 1];\nconst MEDIUM = [1, 0];\nconst QUARTILE = [2, 3];\nconst HIGH = [3, 2];\nconst EccMap = {\n  L: LOW,\n  M: MEDIUM,\n  Q: QUARTILE,\n  H: HIGH\n};\nconst NUMERIC_REGEX = /^[0-9]*$/;\nconst ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\nconst ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\nconst MIN_VERSION = 1;\nconst MAX_VERSION = 40;\nconst PENALTY_N1 = 3;\nconst PENALTY_N2 = 3;\nconst PENALTY_N3 = 40;\nconst PENALTY_N4 = 10;\nconst ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Low\n  [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n  // Medium\n  [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Quartile\n  [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  // High\n];\nconst NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n  // Low\n  [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n  // Medium\n  [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n  // Quartile\n  [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  // High\n];\nclass QrCode {\n  /* -- Constructor (low level) and fields -- */\n  // Creates a new QR Code with the given version number,\n  // error correction level, data codeword bytes, and mask number.\n  // This is a low-level API that most users should not use directly.\n  // A mid-level API is the encodeSegments() function.\n  constructor(version, ecc, dataCodewords, msk) {\n    this.version = version;\n    this.ecc = ecc;\n    /* -- Fields -- */\n    // The width and height of this QR Code, measured in modules, between\n    // 21 and 177 (inclusive). This is equal to version * 4 + 17.\n    __publicField(this, \"size\");\n    // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n    // Even if a QR Code is created with automatic masking requested (mask = -1),\n    // the resulting object still has a mask value between 0 and 7.\n    __publicField(this, \"mask\");\n    // The modules of this QR Code (false = light, true = dark).\n    // Immutable after constructor finishes. Accessed through getModule().\n    __publicField(this, \"modules\", []);\n    __publicField(this, \"types\", []);\n    if (version < MIN_VERSION || version > MAX_VERSION)\n      throw new RangeError(\"Version value out of range\");\n    if (msk < -1 || msk > 7)\n      throw new RangeError(\"Mask value out of range\");\n    this.size = version * 4 + 17;\n    const row = Array.from({ length: this.size }, () => false);\n    for (let i = 0; i < this.size; i++) {\n      this.modules.push(row.slice());\n      this.types.push(row.map(() => 0));\n    }\n    this.drawFunctionPatterns();\n    const allCodewords = this.addEccAndInterleave(dataCodewords);\n    this.drawCodewords(allCodewords);\n    if (msk === -1) {\n      let minPenalty = 1e9;\n      for (let i = 0; i < 8; i++) {\n        this.applyMask(i);\n        this.drawFormatBits(i);\n        const penalty = this.getPenaltyScore();\n        if (penalty < minPenalty) {\n          msk = i;\n          minPenalty = penalty;\n        }\n        this.applyMask(i);\n      }\n    }\n    this.mask = msk;\n    this.applyMask(msk);\n    this.drawFormatBits(msk);\n  }\n  /* -- Accessor methods -- */\n  // Returns the color of the module (pixel) at the given coordinates, which is false\n  // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n  // If the given coordinates are out of bounds, then false (light) is returned.\n  getModule(x, y) {\n    return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];\n  }\n  /* -- Private helper methods for constructor: Drawing function modules -- */\n  // Reads this object's version field, and draws and marks all function modules.\n  drawFunctionPatterns() {\n    for (let i = 0; i < this.size; i++) {\n      this.setFunctionModule(6, i, i % 2 === 0, QrCodeDataType.Timing);\n      this.setFunctionModule(i, 6, i % 2 === 0, QrCodeDataType.Timing);\n    }\n    this.drawFinderPattern(3, 3);\n    this.drawFinderPattern(this.size - 4, 3);\n    this.drawFinderPattern(3, this.size - 4);\n    const alignPatPos = this.getAlignmentPatternPositions();\n    const numAlign = alignPatPos.length;\n    for (let i = 0; i < numAlign; i++) {\n      for (let j = 0; j < numAlign; j++) {\n        if (!(i === 0 && j === 0 || i === 0 && j === numAlign - 1 || i === numAlign - 1 && j === 0))\n          this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n      }\n    }\n    this.drawFormatBits(0);\n    this.drawVersion();\n  }\n  // Draws two copies of the format bits (with its own error correction code)\n  // based on the given mask and this object's error correction level field.\n  drawFormatBits(mask) {\n    const data = this.ecc[1] << 3 | mask;\n    let rem = data;\n    for (let i = 0; i < 10; i++)\n      rem = rem << 1 ^ (rem >>> 9) * 1335;\n    const bits = (data << 10 | rem) ^ 21522;\n    for (let i = 0; i <= 5; i++)\n      this.setFunctionModule(8, i, getBit(bits, i));\n    this.setFunctionModule(8, 7, getBit(bits, 6));\n    this.setFunctionModule(8, 8, getBit(bits, 7));\n    this.setFunctionModule(7, 8, getBit(bits, 8));\n    for (let i = 9; i < 15; i++)\n      this.setFunctionModule(14 - i, 8, getBit(bits, i));\n    for (let i = 0; i < 8; i++)\n      this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n    for (let i = 8; i < 15; i++)\n      this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n    this.setFunctionModule(8, this.size - 8, true);\n  }\n  // Draws two copies of the version bits (with its own error correction code),\n  // based on this object's version field, iff 7 <= version <= 40.\n  drawVersion() {\n    if (this.version < 7)\n      return;\n    let rem = this.version;\n    for (let i = 0; i < 12; i++)\n      rem = rem << 1 ^ (rem >>> 11) * 7973;\n    const bits = this.version << 12 | rem;\n    for (let i = 0; i < 18; i++) {\n      const color = getBit(bits, i);\n      const a = this.size - 11 + i % 3;\n      const b = Math.floor(i / 3);\n      this.setFunctionModule(a, b, color);\n      this.setFunctionModule(b, a, color);\n    }\n  }\n  // Draws a 9*9 finder pattern including the border separator,\n  // with the center module at (x, y). Modules can be out of bounds.\n  drawFinderPattern(x, y) {\n    for (let dy = -4; dy <= 4; dy++) {\n      for (let dx = -4; dx <= 4; dx++) {\n        const dist = Math.max(Math.abs(dx), Math.abs(dy));\n        const xx = x + dx;\n        const yy = y + dy;\n        if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size)\n          this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4, QrCodeDataType.Position);\n      }\n    }\n  }\n  // Draws a 5*5 alignment pattern, with the center module\n  // at (x, y). All modules must be in bounds.\n  drawAlignmentPattern(x, y) {\n    for (let dy = -2; dy <= 2; dy++) {\n      for (let dx = -2; dx <= 2; dx++) {\n        this.setFunctionModule(\n          x + dx,\n          y + dy,\n          Math.max(Math.abs(dx), Math.abs(dy)) !== 1,\n          QrCodeDataType.Alignment\n        );\n      }\n    }\n  }\n  // Sets the color of a module and marks it as a function module.\n  // Only used by the constructor. Coordinates must be in bounds.\n  setFunctionModule(x, y, isDark, type = QrCodeDataType.Function) {\n    this.modules[y][x] = isDark;\n    this.types[y][x] = type;\n  }\n  /* -- Private helper methods for constructor: Codewords and masking -- */\n  // Returns a new byte string representing the given data with the appropriate error correction\n  // codewords appended to it, based on this object's version and error correction level.\n  addEccAndInterleave(data) {\n    const ver = this.version;\n    const ecl = this.ecc;\n    if (data.length !== getNumDataCodewords(ver, ecl))\n      throw new RangeError(\"Invalid argument\");\n    const numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n    const blockEccLen = ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver];\n    const rawCodewords = Math.floor(getNumRawDataModules(ver) / 8);\n    const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n    const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n    const blocks = [];\n    const rsDiv = reedSolomonComputeDivisor(blockEccLen);\n    for (let i = 0, k = 0; i < numBlocks; i++) {\n      const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n      k += dat.length;\n      const ecc = reedSolomonComputeRemainder(dat, rsDiv);\n      if (i < numShortBlocks)\n        dat.push(0);\n      blocks.push(dat.concat(ecc));\n    }\n    const result = [];\n    for (let i = 0; i < blocks[0].length; i++) {\n      blocks.forEach((block, j) => {\n        if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks)\n          result.push(block[i]);\n      });\n    }\n    return result;\n  }\n  // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n  // data area of this QR Code. Function modules need to be marked off before this is called.\n  drawCodewords(data) {\n    if (data.length !== Math.floor(getNumRawDataModules(this.version) / 8))\n      throw new RangeError(\"Invalid argument\");\n    let i = 0;\n    for (let right = this.size - 1; right >= 1; right -= 2) {\n      if (right === 6)\n        right = 5;\n      for (let vert = 0; vert < this.size; vert++) {\n        for (let j = 0; j < 2; j++) {\n          const x = right - j;\n          const upward = (right + 1 & 2) === 0;\n          const y = upward ? this.size - 1 - vert : vert;\n          if (!this.types[y][x] && i < data.length * 8) {\n            this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n            i++;\n          }\n        }\n      }\n    }\n  }\n  // XORs the codeword modules in this QR Code with the given mask pattern.\n  // The function modules must be marked and the codeword bits must be drawn\n  // before masking. Due to the arithmetic of XOR, calling applyMask() with\n  // the same mask value a second time will undo the mask. A final well-formed\n  // QR Code needs exactly one (not zero, two, etc.) mask applied.\n  applyMask(mask) {\n    if (mask < 0 || mask > 7)\n      throw new RangeError(\"Mask value out of range\");\n    for (let y = 0; y < this.size; y++) {\n      for (let x = 0; x < this.size; x++) {\n        let invert;\n        switch (mask) {\n          case 0:\n            invert = (x + y) % 2 === 0;\n            break;\n          case 1:\n            invert = y % 2 === 0;\n            break;\n          case 2:\n            invert = x % 3 === 0;\n            break;\n          case 3:\n            invert = (x + y) % 3 === 0;\n            break;\n          case 4:\n            invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;\n            break;\n          case 5:\n            invert = x * y % 2 + x * y % 3 === 0;\n            break;\n          case 6:\n            invert = (x * y % 2 + x * y % 3) % 2 === 0;\n            break;\n          case 7:\n            invert = ((x + y) % 2 + x * y % 3) % 2 === 0;\n            break;\n          default:\n            throw new Error(\"Unreachable\");\n        }\n        if (!this.types[y][x] && invert)\n          this.modules[y][x] = !this.modules[y][x];\n      }\n    }\n  }\n  // Calculates and returns the penalty score based on state of this QR Code's current modules.\n  // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n  getPenaltyScore() {\n    let result = 0;\n    for (let y = 0; y < this.size; y++) {\n      let runColor = false;\n      let runX = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let x = 0; x < this.size; x++) {\n        if (this.modules[y][x] === runColor) {\n          runX++;\n          if (runX === 5)\n            result += PENALTY_N1;\n          else if (runX > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runX, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runX = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * PENALTY_N3;\n    }\n    for (let x = 0; x < this.size; x++) {\n      let runColor = false;\n      let runY = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let y = 0; y < this.size; y++) {\n        if (this.modules[y][x] === runColor) {\n          runY++;\n          if (runY === 5)\n            result += PENALTY_N1;\n          else if (runY > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runY, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runY = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * PENALTY_N3;\n    }\n    for (let y = 0; y < this.size - 1; y++) {\n      for (let x = 0; x < this.size - 1; x++) {\n        const color = this.modules[y][x];\n        if (color === this.modules[y][x + 1] && color === this.modules[y + 1][x] && color === this.modules[y + 1][x + 1])\n          result += PENALTY_N2;\n      }\n    }\n    let dark = 0;\n    for (const row of this.modules)\n      dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n    const total = this.size * this.size;\n    const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n    result += k * PENALTY_N4;\n    return result;\n  }\n  /* -- Private helper functions -- */\n  // Returns an ascending list of positions of alignment patterns for this version number.\n  // Each position is in the range [0,177), and are used on both the x and y axes.\n  // This could be implemented as lookup table of 40 variable-length lists of integers.\n  getAlignmentPatternPositions() {\n    if (this.version === 1) {\n      return [];\n    } else {\n      const numAlign = Math.floor(this.version / 7) + 2;\n      const step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n      const result = [6];\n      for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n        result.splice(1, 0, pos);\n      return result;\n    }\n  }\n  // Can only be called immediately after a light run is added, and\n  // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n  finderPenaltyCountPatterns(runHistory) {\n    const n = runHistory[1];\n    const core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;\n    return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n  }\n  // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n  finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n    if (currentRunColor) {\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      currentRunLength = 0;\n    }\n    currentRunLength += this.size;\n    this.finderPenaltyAddHistory(currentRunLength, runHistory);\n    return this.finderPenaltyCountPatterns(runHistory);\n  }\n  // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n  finderPenaltyAddHistory(currentRunLength, runHistory) {\n    if (runHistory[0] === 0)\n      currentRunLength += this.size;\n    runHistory.pop();\n    runHistory.unshift(currentRunLength);\n  }\n}\nfunction appendBits(val, len, bb) {\n  if (len < 0 || len > 31 || val >>> len !== 0)\n    throw new RangeError(\"Value out of range\");\n  for (let i = len - 1; i >= 0; i--)\n    bb.push(val >>> i & 1);\n}\nfunction getBit(x, i) {\n  return (x >>> i & 1) !== 0;\n}\nclass QrSegment {\n  // Creates a new QR Code segment with the given attributes and data.\n  // The character count (numChars) must agree with the mode and the bit buffer length,\n  // but the constraint isn't checked. The given bit buffer is cloned and stored.\n  constructor(mode, numChars, bitData) {\n    this.mode = mode;\n    this.numChars = numChars;\n    this.bitData = bitData;\n    if (numChars < 0)\n      throw new RangeError(\"Invalid argument\");\n    this.bitData = bitData.slice();\n  }\n  /* -- Methods -- */\n  // Returns a new copy of the data bits of this segment.\n  getData() {\n    return this.bitData.slice();\n  }\n}\nconst MODE_NUMERIC = [1, 10, 12, 14];\nconst MODE_ALPHANUMERIC = [2, 9, 11, 13];\nconst MODE_BYTE = [4, 8, 16, 16];\nfunction numCharCountBits(mode, ver) {\n  return mode[Math.floor((ver + 7) / 17) + 1];\n}\nfunction makeBytes(data) {\n  const bb = [];\n  for (const b of data)\n    appendBits(b, 8, bb);\n  return new QrSegment(MODE_BYTE, data.length, bb);\n}\nfunction makeNumeric(digits) {\n  if (!isNumeric(digits))\n    throw new RangeError(\"String contains non-numeric characters\");\n  const bb = [];\n  for (let i = 0; i < digits.length; ) {\n    const n = Math.min(digits.length - i, 3);\n    appendBits(Number.parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n    i += n;\n  }\n  return new QrSegment(MODE_NUMERIC, digits.length, bb);\n}\nfunction makeAlphanumeric(text) {\n  if (!isAlphanumeric(text))\n    throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n  const bb = [];\n  let i;\n  for (i = 0; i + 2 <= text.length; i += 2) {\n    let temp = ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n    temp += ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n    appendBits(temp, 11, bb);\n  }\n  if (i < text.length)\n    appendBits(ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n  return new QrSegment(MODE_ALPHANUMERIC, text.length, bb);\n}\nfunction makeSegments(text) {\n  if (text === \"\")\n    return [];\n  else if (isNumeric(text))\n    return [makeNumeric(text)];\n  else if (isAlphanumeric(text))\n    return [makeAlphanumeric(text)];\n  else\n    return [makeBytes(toUtf8ByteArray(text))];\n}\nfunction isNumeric(text) {\n  return NUMERIC_REGEX.test(text);\n}\nfunction isAlphanumeric(text) {\n  return ALPHANUMERIC_REGEX.test(text);\n}\nfunction getTotalBits(segs, version) {\n  let result = 0;\n  for (const seg of segs) {\n    const ccbits = numCharCountBits(seg.mode, version);\n    if (seg.numChars >= 1 << ccbits)\n      return Number.POSITIVE_INFINITY;\n    result += 4 + ccbits + seg.bitData.length;\n  }\n  return result;\n}\nfunction toUtf8ByteArray(str) {\n  str = encodeURI(str);\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) !== \"%\") {\n      result.push(str.charCodeAt(i));\n    } else {\n      result.push(Number.parseInt(str.substring(i + 1, i + 3), 16));\n      i += 2;\n    }\n  }\n  return result;\n}\nfunction getNumRawDataModules(ver) {\n  if (ver < MIN_VERSION || ver > MAX_VERSION)\n    throw new RangeError(\"Version number out of range\");\n  let result = (16 * ver + 128) * ver + 64;\n  if (ver >= 2) {\n    const numAlign = Math.floor(ver / 7) + 2;\n    result -= (25 * numAlign - 10) * numAlign - 55;\n    if (ver >= 7)\n      result -= 36;\n  }\n  return result;\n}\nfunction getNumDataCodewords(ver, ecl) {\n  return Math.floor(getNumRawDataModules(ver) / 8) - ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver] * NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n}\nfunction reedSolomonComputeDivisor(degree) {\n  if (degree < 1 || degree > 255)\n    throw new RangeError(\"Degree out of range\");\n  const result = [];\n  for (let i = 0; i < degree - 1; i++)\n    result.push(0);\n  result.push(1);\n  let root = 1;\n  for (let i = 0; i < degree; i++) {\n    for (let j = 0; j < result.length; j++) {\n      result[j] = reedSolomonMultiply(result[j], root);\n      if (j + 1 < result.length)\n        result[j] ^= result[j + 1];\n    }\n    root = reedSolomonMultiply(root, 2);\n  }\n  return result;\n}\nfunction reedSolomonComputeRemainder(data, divisor) {\n  const result = divisor.map((_) => 0);\n  for (const b of data) {\n    const factor = b ^ result.shift();\n    result.push(0);\n    divisor.forEach((coef, i) => result[i] ^= reedSolomonMultiply(coef, factor));\n  }\n  return result;\n}\nfunction reedSolomonMultiply(x, y) {\n  if (x >>> 8 !== 0 || y >>> 8 !== 0)\n    throw new RangeError(\"Byte out of range\");\n  let z = 0;\n  for (let i = 7; i >= 0; i--) {\n    z = z << 1 ^ (z >>> 7) * 285;\n    z ^= (y >>> i & 1) * x;\n  }\n  return z;\n}\nfunction encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n  if (!(MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= MAX_VERSION) || mask < -1 || mask > 7)\n    throw new RangeError(\"Invalid value\");\n  let version;\n  let dataUsedBits;\n  for (version = minVersion; ; version++) {\n    const dataCapacityBits2 = getNumDataCodewords(version, ecl) * 8;\n    const usedBits = getTotalBits(segs, version);\n    if (usedBits <= dataCapacityBits2) {\n      dataUsedBits = usedBits;\n      break;\n    }\n    if (version >= maxVersion)\n      throw new RangeError(\"Data too long\");\n  }\n  for (const newEcl of [MEDIUM, QUARTILE, HIGH]) {\n    if (boostEcl && dataUsedBits <= getNumDataCodewords(version, newEcl) * 8)\n      ecl = newEcl;\n  }\n  const bb = [];\n  for (const seg of segs) {\n    appendBits(seg.mode[0], 4, bb);\n    appendBits(seg.numChars, numCharCountBits(seg.mode, version), bb);\n    for (const b of seg.getData())\n      bb.push(b);\n  }\n  const dataCapacityBits = getNumDataCodewords(version, ecl) * 8;\n  appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n  appendBits(0, (8 - bb.length % 8) % 8, bb);\n  for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n    appendBits(padByte, 8, bb);\n  const dataCodewords = Array.from({ length: Math.ceil(bb.length / 8) }, () => 0);\n  bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n  return new QrCode(version, ecl, dataCodewords, mask);\n}\n\nfunction encode(data, options) {\n  const {\n    ecc = \"L\",\n    boostEcc = false,\n    minVersion = 1,\n    maxVersion = 40,\n    maskPattern = -1,\n    border = 1\n  } = options || {};\n  const segment = typeof data === \"string\" ? makeSegments(data) : Array.isArray(data) ? [makeBytes(data)] : void 0;\n  if (!segment)\n    throw new Error(`uqr only supports encoding string and binary data, but got: ${typeof data}`);\n  const qr = encodeSegments(\n    segment,\n    EccMap[ecc],\n    minVersion,\n    maxVersion,\n    maskPattern,\n    boostEcc\n  );\n  const result = addBorder({\n    version: qr.version,\n    maskPattern: qr.mask,\n    size: qr.size,\n    data: qr.modules,\n    types: qr.types\n  }, border);\n  if (options?.invert)\n    result.data = result.data.map((row) => row.map((mod) => !mod));\n  options?.onEncoded?.(result);\n  return result;\n}\nfunction addBorder(input, border = 1) {\n  if (!border)\n    return input;\n  const { size } = input;\n  const newSize = size + border * 2;\n  input.size = newSize;\n  input.data.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(false);\n      row.push(false);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.data.unshift(Array.from({ length: newSize }, (_) => false));\n    input.data.push(Array.from({ length: newSize }, (_) => false));\n  }\n  const b = QrCodeDataType.Border;\n  input.types.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(b);\n      row.push(b);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.types.unshift(Array.from({ length: newSize }, (_) => b));\n    input.types.push(Array.from({ length: newSize }, (_) => b));\n  }\n  return input;\n}\nfunction getDataAt(data, x, y, defaults = false) {\n  if (x < 0 || y < 0 || x >= data.length || y >= data.length)\n    return defaults;\n  return data[y][x];\n}\n\nfunction renderUnicode(data, options = {}) {\n  const {\n    whiteChar = \"\\u2588\",\n    blackChar = \"\\u2591\"\n  } = options;\n  const result = encode(data, options);\n  return result.data.map((row) => {\n    return row.map((mod) => mod ? blackChar : whiteChar).join(\"\");\n  }).join(\"\\n\");\n}\nfunction renderANSI(data, options = {}) {\n  return renderUnicode(data, {\n    ...options,\n    blackChar: \"\\x1B[40m\\u3000\\x1B[0m\",\n    whiteChar: \"\\x1B[47m\\u3000\\x1B[0m\"\n  });\n}\nfunction renderUnicodeCompact(data, options = {}) {\n  const platte = {\n    WHITE_ALL: \"\\u2588\",\n    WHITE_BLACK: \"\\u2580\",\n    BLACK_WHITE: \"\\u2584\",\n    BLACK_ALL: \" \"\n  };\n  const result = encode(data, options);\n  const WHITE = false;\n  const BLACK = true;\n  const at = (x, y) => getDataAt(result.data, x, y, true);\n  const lines = [];\n  let line = \"\";\n  for (let row = 0; row < result.size; row += 2) {\n    for (let col = 0; col < result.size; col++) {\n      if (at(col, row) === WHITE && at(col, row + 1) === WHITE)\n        line += platte.WHITE_ALL;\n      else if (at(col, row) === WHITE && at(col, row + 1) === BLACK)\n        line += platte.WHITE_BLACK;\n      else if (at(col, row) === BLACK && at(col, row + 1) === WHITE)\n        line += platte.BLACK_WHITE;\n      else\n        line += platte.BLACK_ALL;\n    }\n    lines.push(line);\n    line = \"\";\n  }\n  return lines.join(\"\\n\");\n}\n\nfunction renderSVG(data, options = {}) {\n  const result = encode(data, options);\n  const {\n    pixelSize = 10,\n    whiteColor = \"white\",\n    blackColor = \"black\"\n  } = options;\n  const height = result.size * pixelSize;\n  const width = result.size * pixelSize;\n  let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${width} ${height}\">`;\n  const pathes = [];\n  for (let row = 0; row < result.size; row++) {\n    for (let col = 0; col < result.size; col++) {\n      const x = col * pixelSize;\n      const y = row * pixelSize;\n      if (result.data[row][col])\n        pathes.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`);\n    }\n  }\n  svg += `<rect fill=\"${whiteColor}\" width=\"${width}\" height=\"${height}\"/>`;\n  svg += `<path fill=\"${blackColor}\" d=\"${pathes.join(\"\")}\"/>`;\n  svg += \"</svg>\";\n  return svg;\n}\n\nexport { QrCodeDataType, encode, renderANSI, renderSVG, renderUnicode, renderUnicodeCompact };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1071, "column": 0}, "map": {"version":3,"file":"QRCodeRenderer.js","sourceRoot":"","sources":["../../../../../../../src/react/web/ui/components/QRCode/QRCodeRenderer.tsx"],"names":[],"mappings":"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","debugId":null}}]
}