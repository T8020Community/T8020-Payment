(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/thirdweb/dist/esm/merkletree/MerkleTree.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// ADAPTED FROM https://github.com/merkletreejs/merkletreejs
__turbopack_context__.s({
    "MerkleTree": (()=>MerkleTree)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/to-bytes.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$hashing$2f$keccak256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/hashing/keccak256.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$uint8$2d$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/uint8-array.js [app-client] (ecmascript)");
;
;
;
;
class MerkleTree {
    constructor(leaves){
        Object.defineProperty(this, "leaves", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "layers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        this.leaves = leaves.map((el)=>el instanceof Uint8Array ? el : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hexToBytes"])(el));
        this.leaves = this.leaves.sort(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$uint8$2d$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareUint8Arrays"]);
        this.createHashes(this.leaves);
    }
    getHexRoot() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["uint8ArrayToHex"])(this.getRoot());
    }
    getHexProof(leaf, index) {
        return this.getProof(leaf, index).map((item)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["uint8ArrayToHex"])(item.data));
    }
    // private below
    createHashes(nodes) {
        this.layers = [
            nodes
        ];
        while(nodes.length > 1){
            const layerIndex = this.layers.length;
            this.layers.push([]);
            const layerLimit = nodes.length;
            for(let i = 0; i < nodes.length; i += 2){
                if (i >= layerLimit) {
                    // biome-ignore lint/style/noNonNullAssertion: in bounds
                    this.layers[layerIndex].push(...nodes.slice(layerLimit));
                    break;
                }
                if (i + 1 === nodes.length) {
                    if (nodes.length % 2 === 1) {
                        // push copy of hash and continue iteration
                        // biome-ignore lint/style/noNonNullAssertion: in bounds
                        this.layers[layerIndex].push(nodes[i]);
                        continue;
                    }
                }
                // biome-ignore lint/style/noNonNullAssertion: in bounds
                const left = nodes[i];
                // biome-ignore lint/style/noNonNullAssertion: in bounds
                const right = i + 1 === nodes.length ? left : nodes[i + 1];
                const combined = [
                    left,
                    right
                ];
                combined.sort(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$uint8$2d$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareUint8Arrays"]);
                const hash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$hashing$2f$keccak256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["keccak256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$uint8$2d$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concatUint8Arrays"])(combined), "bytes");
                // biome-ignore lint/style/noNonNullAssertion: in bounds
                this.layers[layerIndex].push(hash);
            }
            // biome-ignore lint/style/noParameterAssign: part of the functionality
            // biome-ignore lint/style/noNonNullAssertion: in bounds
            nodes = this.layers[layerIndex];
        }
    }
    getRoot() {
        if (this.layers.length === 0) {
            return new Uint8Array();
        }
        // biome-ignore lint/style/noNonNullAssertion: in bounds
        return this.layers[this.layers.length - 1][0] || new Uint8Array();
    }
    getProof(leaf, index) {
        if (typeof leaf === "undefined") {
            throw new Error("leaf is required");
        }
        // biome-ignore lint/style/noParameterAssign: part of the functionality
        leaf = leaf instanceof Uint8Array ? leaf : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hexToBytes"])(leaf);
        const proof = [];
        if (!Number.isInteger(index)) {
            // biome-ignore lint/style/noParameterAssign: part of the functionality
            index = -1;
            for(let i = 0; i < this.leaves.length; i++){
                // biome-ignore lint/style/noNonNullAssertion: within bounds
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$uint8$2d$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["areUint8ArraysEqual"])(leaf, this.leaves[i])) {
                    // biome-ignore lint/style/noParameterAssign: part of the functionality
                    index = i;
                }
            }
        }
        // @ts-expect-error - issue from original code
        if (index <= -1) {
            return [];
        }
        for(let i = 0; i < this.layers.length; i++){
            // biome-ignore lint/style/noNonNullAssertion: in bounds
            const layer = this.layers[i];
            // @ts-expect-error - issue from original code
            const isRightNode = index % 2;
            const pairIndex = isRightNode ? index - 1 : // @ts-expect-error - issue from original code
            index + 1;
            if (pairIndex < layer.length) {
                proof.push({
                    position: isRightNode ? "left" : "right",
                    data: layer[pairIndex]
                });
            }
            // set index to parent index
            // @ts-expect-error - issue from original code
            // biome-ignore lint/style/noParameterAssign: part of the functionality
            index = index / 2 | 0;
        }
        // @ts-expect-error - issue from original code
        return proof;
    }
} //# sourceMappingURL=MerkleTree.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/extensions/drops/convert-quantity.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "convertQuantity": (()=>convertQuantity)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Solidity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/ox/_esm/core/Solidity.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$units$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/units.js [app-client] (ecmascript)");
;
;
function convertQuantity(options) {
    const { quantity, tokenDecimals } = options;
    if (quantity === "unlimited") {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Solidity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["maxUint256"];
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$units$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toUnits"])(quantity, tokenDecimals);
} //# sourceMappingURL=convert-quantity.js.map
}}),
"[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/abi/encodePacked.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "encodePacked": (()=>encodePacked)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$errors$2f$abi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/errors/abi.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$errors$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/errors/address.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$address$2f$isAddress$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/address/isAddress.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/data/concat.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$pad$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/data/pad.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$encoding$2f$toHex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/encoding/toHex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$regex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/regex.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
function encodePacked(types, values) {
    if (types.length !== values.length) throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$errors$2f$abi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AbiEncodingLengthMismatchError"]({
        expectedLength: types.length,
        givenLength: values.length
    });
    const data = [];
    for(let i = 0; i < types.length; i++){
        const type = types[i];
        const value = values[i];
        data.push(encode(type, value));
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concatHex"])(data);
}
function encode(type, value, isArray = false) {
    if (type === 'address') {
        const address = value;
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$address$2f$isAddress$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAddress"])(address)) throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$errors$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InvalidAddressError"]({
            address
        });
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$pad$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pad"])(address.toLowerCase(), {
            size: isArray ? 32 : null
        });
    }
    if (type === 'string') return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$encoding$2f$toHex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringToHex"])(value);
    if (type === 'bytes') return value;
    if (type === 'bool') return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$pad$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pad"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$encoding$2f$toHex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["boolToHex"])(value), {
        size: isArray ? 32 : 1
    });
    const intMatch = type.match(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$regex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["integerRegex"]);
    if (intMatch) {
        const [_type, baseType, bits = '256'] = intMatch;
        const size = Number.parseInt(bits) / 8;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$encoding$2f$toHex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["numberToHex"])(value, {
            size: isArray ? 32 : size,
            signed: baseType === 'int'
        });
    }
    const bytesMatch = type.match(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$regex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bytesRegex"]);
    if (bytesMatch) {
        const [_type, size] = bytesMatch;
        if (Number.parseInt(size) !== (value.length - 2) / 2) throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$errors$2f$abi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BytesSizeMismatchError"]({
            expectedSize: Number.parseInt(size),
            givenSize: (value.length - 2) / 2
        });
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$pad$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pad"])(value, {
            dir: 'right',
            size: isArray ? 32 : null
        });
    }
    const arrayMatch = type.match(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$regex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["arrayRegex"]);
    if (arrayMatch && Array.isArray(value)) {
        const [_type, childType] = arrayMatch;
        const data = [];
        for(let i = 0; i < value.length; i++){
            data.push(encode(childType, value[i], true));
        }
        if (data.length === 0) return '0x';
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concatHex"])(data);
    }
    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$errors$2f$abi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["UnsupportedPackedAbiType"](type);
} //# sourceMappingURL=encodePacked.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/extensions/drops/hash-entry.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "hashEntry": (()=>hashEntry)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/abi/encodePacked.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$constants$2f$addresses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/constants/addresses.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/address.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$hashing$2f$keccak256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/hashing/keccak256.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$extensions$2f$drops$2f$convert$2d$quantity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/extensions/drops/convert-quantity.js [app-client] (ecmascript)");
;
;
;
;
;
async function hashEntry(options) {
    const currencyAddress = options.entry.currencyAddress || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$constants$2f$addresses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ZERO_ADDRESS"];
    const currencyDecimals = await (async ()=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$constants$2f$addresses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeTokenAddress"])(currencyAddress) || currencyAddress === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$constants$2f$addresses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ZERO_ADDRESS"]) {
            return 18;
        }
        const [{ getContract }, { decimals: getDecimals }] = await Promise.all([
            __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/contract/contract.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
            __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/extensions/erc20/read/decimals.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)
        ]);
        const currencyContract = getContract({
            address: currencyAddress,
            chain: options.chain,
            client: options.client
        });
        return await getDecimals({
            contract: currencyContract
        });
    })();
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$hashing$2f$keccak256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["keccak256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["encodePacked"])([
        "address",
        "uint256",
        "uint256",
        "address"
    ], [
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(options.entry.address),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$extensions$2f$drops$2f$convert$2d$quantity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertQuantity"])({
            quantity: options.entry.maxClaimable || "unlimited",
            tokenDecimals: options.tokenDecimals
        }),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$extensions$2f$drops$2f$convert$2d$quantity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertQuantity"])({
            quantity: options.entry.price || "unlimited",
            tokenDecimals: currencyDecimals
        }),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(currencyAddress)
    ]));
} //# sourceMappingURL=hash-entry.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/extensions/drops/fetch-proofs-for-claimers.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "fetchProofsForClaimer": (()=>fetchProofsForClaimer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$constants$2f$addresses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/constants/addresses.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$merkletree$2f$MerkleTree$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/merkletree/MerkleTree.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$storage$2f$download$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/storage/download.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$extensions$2f$drops$2f$convert$2d$quantity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/extensions/drops/convert-quantity.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$extensions$2f$drops$2f$hash$2d$entry$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/extensions/drops/hash-entry.js [app-client] (ecmascript)");
;
;
;
;
;
async function fetchProofsForClaimer(options) {
    const { contract, merkleTreeUri, claimer } = options;
    const hashEntryFn = options.hashEntry || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$extensions$2f$drops$2f$hash$2d$entry$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hashEntry"];
    // 2. download snapshot data
    const response = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$storage$2f$download$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["download"])({
        client: contract.client,
        uri: merkleTreeUri
    });
    const merkleInfo = await response.json();
    // 3. download shard data based off the user address
    const shardId = claimer.slice(2, 2 + merkleInfo.shardNybbles).toLowerCase();
    const uri = merkleInfo.baseUri.endsWith("/") ? merkleInfo.baseUri : `${merkleInfo.baseUri}/`;
    let shardData;
    try {
        const constructedShardUri = `${uri}${shardId}.json`;
        const shard = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$storage$2f$download$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["download"])({
            client: contract.client,
            uri: constructedShardUri
        });
        shardData = await shard.json();
    } catch  {
        // if the file can't be fetched it means claimer not in merkle tree
        return null;
    }
    // 4. hash all the entries in that shard and construct the sub merkle tree
    const hashedEntries = await Promise.all(shardData.entries.map(async (entry)=>{
        return hashEntryFn({
            entry,
            chain: contract.chain,
            client: contract.client,
            tokenDecimals: options.tokenDecimals
        });
    }));
    // 5. get the proof for the claimer + the sub merkle tree root
    const tree = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$merkletree$2f$MerkleTree$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MerkleTree"](hashedEntries);
    const entry = shardData.entries.find((i)=>i.address.toLowerCase() === claimer.toLowerCase());
    if (!entry) {
        return null;
    }
    const proof = tree.getHexProof(await hashEntryFn({
        entry,
        chain: contract.chain,
        client: contract.client,
        tokenDecimals: options.tokenDecimals
    })).concat(shardData.proofs);
    // 6. return the proof and the entry data for the contract call
    const currencyAddress = entry.currencyAddress || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$constants$2f$addresses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ZERO_ADDRESS"];
    const currencyDecimals = await (async ()=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$constants$2f$addresses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeTokenAddress"])(currencyAddress) || currencyAddress === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$constants$2f$addresses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ZERO_ADDRESS"]) {
            return 18;
        }
        const [{ getContract }, { decimals: getDecimals }] = await Promise.all([
            __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/contract/contract.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
            __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/extensions/erc20/read/decimals.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)
        ]);
        const currencyContract = getContract({
            address: currencyAddress,
            chain: contract.chain,
            client: contract.client
        });
        return await getDecimals({
            contract: currencyContract
        });
    })();
    return {
        proof,
        quantityLimitPerWallet: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$extensions$2f$drops$2f$convert$2d$quantity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertQuantity"])({
            quantity: entry.maxClaimable || "unlimited",
            tokenDecimals: options.tokenDecimals
        }),
        pricePerToken: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$extensions$2f$drops$2f$convert$2d$quantity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertQuantity"])({
            quantity: entry.price || "unlimited",
            tokenDecimals: currencyDecimals
        }),
        currency: currencyAddress
    };
} //# sourceMappingURL=fetch-proofs-for-claimers.js.map
}}),
}]);

//# sourceMappingURL=node_modules_thirdweb_ac3a340d._.js.map